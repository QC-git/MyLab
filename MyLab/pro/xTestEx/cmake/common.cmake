MACRO(CXX_STANDARD_BIN_PRJ PRJNAME)
  PROJECT(${PRJNAME})
  set(CMAKE_EXPORT_COMPILE_COMMANDS "ON")
  # CXX_OPTIONS()
  LOAD_FILES()

  ADD_EXECUTABLE(${PRJNAME} ${SRC})
  SET_TARGET_PROPERTIES(${PRJNAME} PROPERTIES LINKER_LANGUAGE CXX)
ENDMACRO(CXX_STANDARD_BIN_PRJ)

MACRO(CXX_STANDARD_LIB_PRJ PRJNAME)
  PROJECT(${PRJNAME})
  set(CMAKE_EXPORT_COMPILE_COMMANDS "ON")
  INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
  # CXX_OPTIONS()
  LOAD_FILES()

  ADD_LIBRARY(${PRJNAME} STATIC ${SRC})
  SET_TARGET_PROPERTIES(${PRJNAME} PROPERTIES LINKER_LANGUAGE CXX)
ENDMACRO(CXX_STANDARD_LIB_PRJ)

MACRO(CXX_OPTIONS)
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /D _CRT_NONSTDC_NO_DEPRECATE /D _CRT_SECURE_NO_DEPRECATE /EHsc")
    ADD_DEFINITIONS(/wd4786)
  # ENDIF()

  # IF(WIN32 AND NOT UNIX)
  #   ADD_DEFINITIONS(-DWIN32)
  #   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /D WIN32 /D _RAKNET_LIB /D _WINSOCK_DEPRECATED_NO_WARNINGS")
  ELSE()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fexceptions -std=c++11")
  ENDIF()
ENDMACRO(CXX_OPTIONS)

MACRO(LOAD_FILES)

  FILE(GLOB_RECURSE RM_SRC "CMake*" "build/*" "bin/*")

  FILE(GLOB_RECURSE SRC
    "${PROJECT_SOURCE_DIR}/*.cc"
    "${PROJECT_SOURCE_DIR}/*.c"
    "${PROJECT_SOURCE_DIR}/*.cpp"
    "${PROJECT_SOURCE_DIR}/*.h"
    "${PROJECT_SOURCE_DIR}/*.hpp"
    )

  LIST(REMOVE_ITEM SRC ${RM_SRC})

  create_source_group(${PROJECT_SOURCE_DIR} ${SRC})
ENDMACRO(LOAD_FILES)

FUNCTION(create_source_group relativeSourcePath)
  FOREACH(currentSourceFile ${ARGN})
    FILE(RELATIVE_PATH folder ${relativeSourcePath} ${currentSourceFile})
    GET_FILENAME_COMPONENT(filename ${folder} NAME)
    STRING(REPLACE ${filename} "" folder ${folder})
    IF(NOT folder STREQUAL "")
      STRING(REGEX REPLACE "/+$" "" folderlast ${folder})
      STRING(REPLACE "/" "\\" folderlast ${folderlast})
      SOURCE_GROUP("${folderlast}" FILES ${currentSourceFile})
    ENDIF(NOT folder STREQUAL "")
  ENDFOREACH(currentSourceFile ${ARGN})
ENDFUNCTION(create_source_group)



MACRO(ADD_PRECOMPILED_HEADER _targetName _input)
  GET_FILENAME_COMPONENT(_inputWe ${_input} NAME_WE)
  SET(pch_source ${_inputWe}.cpp)
  FOREACH(arg ${ARGN})
    IF(arg STREQUAL FORCEINCLUDE)
      SET(FORCEINCLUDE ON)
    ELSE(arg STREQUAL FORCEINCLUDE)
      SET(FORCEINCLUDE OFF)
    ENDIF(arg STREQUAL FORCEINCLUDE)
  ENDFOREACH(arg)

  IF(MSVC)
    GET_TARGET_PROPERTY(sources ${_targetName} SOURCES)
    SET(_sourceFound FALSE)
    FOREACH(_source ${sources})
      SET(PCH_COMPILE_FLAGS "")
      IF(_source MATCHES \\.\(cc|cxx|cpp\)$)
        GET_FILENAME_COMPONENT(_sourceWe ${_source} NAME_WE)
        IF(_sourceWe STREQUAL ${_inputWe})
          SET(PCH_COMPILE_FLAGS "${PCH_COMPILE_FLAGS} /Yc${_input}")
          SET(_sourceFound TRUE)
        ELSE(_sourceWe STREQUAL ${_inputWe})
          SET(PCH_COMPILE_FLAGS "${PCH_COMPILE_FLAGS} /Yu${_input}")
          IF(FORCEINCLUDE)
            SET(PCH_COMPILE_FLAGS "${PCH_COMPILE_FLAGS} /FI${_input}")
          ENDIF(FORCEINCLUDE)
        ENDIF(_sourceWe STREQUAL ${_inputWe})
        SET_SOURCE_FILES_PROPERTIES(${_source} PROPERTIES COMPILE_FLAGS "${PCH_COMPILE_FLAGS}")
      ENDIF(_source MATCHES \\.\(cc|cxx|cpp\)$)
    ENDFOREACH()
    IF(NOT _sourceFound)
      MESSAGE(FATAL_ERROR "A source file for ${_input} was not found. Required for MSVC builds.")
    ENDIF(NOT _sourceFound)
  ENDIF(MSVC)

  #IF(CMAKE_COMPILER_IS_GNUCXX)
  #  GET_FILENAME_COMPONENT(_name ${_input} NAME)
  #  SET(_source "${CMAKE_CURRENT_SOURCE_DIR}/${_input}")
  #  SET(_outdir "${CMAKE_CURRENT_BINARY_DIR}/${_name}.gch")
  #  MAKE_DIRECTORY(${_outdir})
  #  SET(_output "${_outdir}/.c++")

  #  STRING(TOUPPER "CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}" _flags_var_name)
  #  SET(_compiler_FLAGS ${${_flags_var_name}})

  #  GET_DIRECTORY_PROPERTY(_directory_flags INCLUDE_DIRECTORIES)
  #  FOREACH(item ${_directory_flags})
  #    LIST(APPEND _compiler_FLAGS "-I${item}")
  #  ENDFOREACH(item)

  #  GET_DIRECTORY_PROPERTY(_directory_flags DEFINITIONS)
  #  LIST(APPEND _compiler_FLAGS ${_directory_flags})

  #  SEPARATE_ARGUMENTS(_compiler_FLAGS)
  #  MESSAGE("${CMAKE_CXX_COMPILER} -DPCHCOMPILE ${_compiler_FLAGS} -x c++-header -o {_output} ${_source}")
  #  ADD_CUSTOM_COMMAND(
  #    OUTPUT ${_output}
  #    COMMAND ${CMAKE_CXX_COMPILER} ${_compiler_FLAGS} -x c++-header -o ${_output} ${_source}
  #    DEPENDS ${_source} )
  #  ADD_CUSTOM_TARGET(${_targetName}_gch DEPENDS ${_output})
  #  ADD_DEPENDENCIES(${_targetName} ${_targetName}_gch)
  #  SET_TARGET_PROPERTIES(${_targetName} PROPERTIES COMPILE_FLAGS "-include ${_name} -Winvalid-pch")
  #ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDMACRO(ADD_PRECOMPILED_HEADER)

MACRO(CXX_STANDARD_BIN_PRJ_WITH_PRECOMPILER PRJNAME _dir _header _cpp)
  PROJECT(${PRJNAME})
  set(CMAKE_EXPORT_COMPILE_COMMANDS "ON")
  INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR} ${_dir})
  # CXX_OPTIONS()
  LOAD_FILES()
  if(MSVC)
    set(pch_source ${_dir}/${_cpp})
  endif()
  ADD_EXECUTABLE(${PRJNAME} ${SRC} ${_dir}/${_header} ${pch_source})
  SET_TARGET_PROPERTIES(${PRJNAME} PROPERTIES LINKER_LANGUAGE CXX)
  ADD_PRECOMPILED_HEADER(${PRJNAME} ${_header})
ENDMACRO(CXX_STANDARD_BIN_PRJ_WITH_PRECOMPILER)


MACRO(CXX_STANDARD_LIB_PRJ_WITH_PRECOMPILER PRJNAME _dir _header _cpp)
  PROJECT(${PRJNAME})
  set(CMAKE_EXPORT_COMPILE_COMMANDS "ON")
  INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR} ${_dir})
  # CXX_OPTIONS()
  LOAD_FILES()
  if(MSVC)
    set(pch_source ${_dir}/${_cpp})
  endif()
  ADD_LIBRARY(${PRJNAME} STATIC ${SRC} ${_dir}/${_header} ${pch_source})
  SET_TARGET_PROPERTIES(${PRJNAME} PROPERTIES LINKER_LANGUAGE CXX)
  ADD_PRECOMPILED_HEADER(${PRJNAME} ${_header})
ENDMACRO(CXX_STANDARD_LIB_PRJ_WITH_PRECOMPILER)

MACRO(CXX_STANDARD_SHR_PRJ_WITH_PRECOMPILER PRJNAME _dir _header _cpp)
  PROJECT(${PRJNAME})
  set(CMAKE_EXPORT_COMPILE_COMMANDS "ON")
  INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR} ${_dir})
  # CXX_OPTIONS()
  LOAD_FILES()
  if(MSVC)
    set(pch_source ${_dir}/${_cpp})
  endif()
  ADD_LIBRARY(${PRJNAME} SHARED ${SRC} ${_dir}/${_header} ${pch_source})
  SET_TARGET_PROPERTIES(${PRJNAME} PROPERTIES LINKER_LANGUAGE CXX)
  ADD_PRECOMPILED_HEADER(${PRJNAME} ${_header})
ENDMACRO(CXX_STANDARD_SHR_PRJ_WITH_PRECOMPILER)
